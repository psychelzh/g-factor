```{r}
adj_mats_pool <- brain_mask |>
  pivot_longer(
    any_of(names(model_types)),
    names_to = "model_type",
    values_to = "mask"
  ) |>
  mutate(
    idx = factor(idx, names(meas_behav)),
    model_type = factor(model_type, names(model_types)),
    adj_mat = map(
      mask, prepare_adjacency,
      diagonal = 0
    ),
    node_degree = map(
      adj_mat,
      ~ igraph::graph_from_adjacency_matrix(.x, mode = "undirected") |>
        igraph::degree()
    ),
    .keep = "unused"
  ) |>
  arrange(idx, model_type)
```

## Markers Plotting (Pracellation: {{ parcels[parcel] }}) {.smaller}

```{python}
#| label: fig-markers-{{ parcel }}
#| fig-width: 3
#| fig-height: 1.8
#| fig-cap: Markers Plotting (top 500 edges)
#| fig-subcap:
#|   - G Overall, Pos-Corr Network
#|   - G Overall, Neg-Corr Network
#|   - RAPM, Pos-Corr Network
#|   - RAPM, Neg-Corr Network
#| layout-ncol: 2
#| dev: png

import numpy as np
import pandas as pd
from nilearn import plotting
from matplotlib import pyplot

# Compute node degree values (dummy values for demonstration)
for row in range(r.adj_mats_pool.shape[0]):
  p = plotting.plot_markers(
    r.adj_mats_pool.node_degree[row], 
    r.roi_coords, 
    node_cmap=pyplot.cm.viridis
  )
  pyplot.show()
```

## Chord Diagram (Condition: {{ parcels[parcel] }}) {.smaller}

```{r}
#| label: fig-mask-chord-{{ parcel }}
#| fig-width: 10
#| fig-height: 8
#| fig-cap: Chord diagram of top 500 edges

# see https://stackoverflow.com/a/24438639/5996475
# The main point here is that we need to add an outer margin to the plot so that
# the row and column labels are added there. Note there might be an alternative way
# to use patchwork package, but for now it depends on this issue:
# https://github.com/thomasp85/patchwork/issues/322
par(oma = c(0, 2, 2, 0), mfrow = c(2, 2), mar = c(0, 0, 0, 0) + 0.1)
visualize_chord(adj_mats_pool$adj_mat[[1]], roi_info, getOption("chord.link.val"))
mtext(
  model_types[[adj_mats_pool$model_type[[1]]]],
  side = 3, line = 0,
  at = grconvertX(0.5, "npc", "nic"), outer = TRUE
)
mtext(
  meas_behav[[adj_mats_pool$idx[[1]]]],
  side = 2, line = 0,
  at = grconvertY(0.5, "npc", "nic"), outer = TRUE
)
visualize_chord(adj_mats_pool$adj_mat[[2]], roi_info, getOption("chord.link.val"))
mtext(
  model_types[[adj_mats_pool$model_type[[2]]]],
  side = 3, line = 0,
  at = grconvertX(0.5, "npc", "nic"), outer = TRUE
)
visualize_chord(adj_mats_pool$adj_mat[[3]], roi_info, getOption("chord.link.val"))
mtext(
  meas_behav[[adj_mats_pool$idx[[3]]]],
  side = 2, line = 0,
  at = grconvertY(0.5, "npc", "nic"), outer = TRUE
)
visualize_chord(adj_mats_pool$adj_mat[[4]], roi_info, getOption("chord.link.val"))
```

## Contribution of Networks  (Condition: {{ parcels[parcel] }})  {.smaller}

```{r}
#| label: fig-ctb-{{ parcel }}
#| fig-width: 10
#| fig-height: 8
#| fig-cap: Contribution of Networks

par(oma = c(0, 2, 2, 0), mfrow = c(2, 2), mar = c(0, 0, 0, 0) + 0.1)
visualize_corrplot(adj_mats_pool$adj_mat[[1]], adj_mats_pool$model_type[[1]], roi_info$label)
mtext(
  model_types[[adj_mats_pool$model_type[[1]]]],
  side = 3, line = 0,
  at = grconvertX(0.5, "npc", "nic"), outer = TRUE
)
mtext(
  meas_behav[[adj_mats_pool$idx[[1]]]],
  side = 2, line = 0,
  at = grconvertY(0.5, "npc", "nic"), outer = TRUE
)
visualize_corrplot(adj_mats_pool$adj_mat[[2]], adj_mats_pool$model_type[[2]], roi_info$label)
mtext(
  model_types[[adj_mats_pool$model_type[[2]]]],
  side = 3, line = 0,
  at = grconvertX(0.5, "npc", "nic"), outer = TRUE
)
visualize_corrplot(adj_mats_pool$adj_mat[[3]], adj_mats_pool$model_type[[3]], roi_info$label)
mtext(
  meas_behav[[adj_mats_pool$idx[[3]]]],
  side = 2, line = 0,
  at = grconvertY(0.5, "npc", "nic"), outer = TRUE
)
visualize_corrplot(adj_mats_pool$adj_mat[[4]], adj_mats_pool$model_type[[4]], roi_info$label)
```
